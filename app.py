import cv2
import streamlit as st
import numpy as np
import pandas as pd
import torch
import os
import sys

# Configuraci√≥n de p√°gina Streamlit
st.set_page_config(
    page_title="Detecci√≥n de Objetos en Tiempo Real",
    page_icon="üîç",
    layout="wide"
)

# Funci√≥n para cargar el modelo YOLOv5 de manera compatible con versiones anteriores de PyTorch
@st.cache_resource
def load_yolov5_model(model_path='yolov5s.pt'):
    try:
        # Importar yolov5
        import yolov5
        
        # Para versiones de PyTorch anteriores a 2.0, cargar directamente con weights_only=False
        # o usar el par√°metro map_location para asegurar compatibilidad
        try:
            # Primer m√©todo: cargar con weights_only=False si la versi√≥n lo soporta
            model = yolov5.load(model_path, weights_only=False)
            return model
        except TypeError:
            # Segundo m√©todo: si el primer m√©todo falla, intentar un enfoque m√°s b√°sico
            try:
                model = yolov5.load(model_path)
                return model
            except Exception as e:
                # Si todo falla, intentar cargar el modelo con torch directamente
                st.warning(f"Intentando m√©todo alternativo de carga...")
                
                # Modificar sys.path temporalmente para poder importar torch correctamente
                current_dir = os.path.dirname(os.path.abspath(__file__))
                if current_dir not in sys.path:
                    sys.path.append(current_dir)
                
                # Cargar el modelo con torch directamente
                device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
                model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
                return model
    
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo: {str(e)}")
        st.info("""
        Recomendaciones:
        1. Instalar una versi√≥n compatible de PyTorch y YOLOv5:
           ```
           pip install torch==1.12.0 torchvision==0.13.0
           pip install yolov5==7.0.9
           ```
        2. Aseg√∫rate de tener el archivo del modelo en la ubicaci√≥n correcta
        3. Si el problema persiste, intenta descargar el modelo directamente de torch hub
        """)
        return None

# T√≠tulo y descripci√≥n de la aplicaci√≥n
st.title("üîç Detecci√≥n de Objetos en Im√°genes")
st.markdown("""
Esta aplicaci√≥n utiliza YOLOv5 para detectar objetos en im√°genes capturadas con tu c√°mara.
Ajusta los par√°metros en la barra lateral para personalizar la detecci√≥n.
""")

# Cargar el modelo
with st.spinner("Cargando modelo YOLOv5..."):
    model = load_yolov5_model()

# Si el modelo se carg√≥ correctamente, configuramos los par√°metros
if model:
    # Sidebar para los par√°metros de configuraci√≥n
    st.sidebar.title("Par√°metros")
    
    # Ajustar par√°metros del modelo
    with st.sidebar:
        st.subheader('Configuraci√≥n de detecci√≥n')
        model.conf = st.slider('Confianza m√≠nima', 0.0, 1.0, 0.25, 0.01)
        model.iou = st.slider('Umbral IoU', 0.0, 1.0, 0.45, 0.01)
        st.caption(f"Confianza: {model.conf:.2f} | IoU: {model.iou:.2f}")
        
        # Opciones adicionales
        st.subheader('Opciones avanzadas')
        try:
            model.agnostic = st.checkbox('NMS class-agnostic', False)
            model.multi_label = st.checkbox('M√∫ltiples etiquetas por caja', False)
            model.max_det = st.number_input('Detecciones m√°ximas', 10, 2000, 1000, 10)
        except:
            st.warning("Algunas opciones avanzadas no est√°n disponibles con esta configuraci√≥n")
    
    # Contenedor principal para la c√°mara y resultados
    main_container = st.container()
    
    with main_container:
        # Capturar foto con la c√°mara
        picture = st.camera_input("Capturar imagen", key="camera")
        
        if picture:
            # Procesar la imagen capturada
            bytes_data = picture.getvalue()
            cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)
            
            # Realizar la detecci√≥n
            with st.spinner("Detectando objetos..."):
                try:
                    results = model(cv2_img)
                except Exception as e:
                    st.error(f"Error durante la detecci√≥n: {str(e)}")
                    st.stop()
            
            # Parsear resultados
            try:
                predictions = results.pred[0]
                boxes = predictions[:, :4]
                scores = predictions[:, 4]
                categories = predictions[:, 5]
                
                # Mostrar resultados
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("Imagen con detecciones")
                    # Renderizar las detecciones
                    results.render()
                    # Mostrar imagen con las detecciones
                    st.image(cv2_img, channels='BGR', use_column_width=True)
                
                with col2:
                    st.subheader("Objetos detectados")
                    
                    # Obtener nombres de etiquetas
                    label_names = model.names
                    
                    # Contar categor√≠as
                    category_count = {}
                    for category in categories:
                        category_idx = int(category.item()) if hasattr(category, 'item') else int(category)
                        if category_idx in category_count:
                            category_count[category_idx] += 1
                        else:
                            category_count[category_idx] = 1
                    
                    # Crear dataframe para mostrar resultados
                    data = []
                    for category, count in category_count.items():
                        label = label_names[category]
                        confidence = scores[categories == category].mean().item() if len(scores) > 0 else 0
                        data.append({
                            "Categor√≠a": label,
                            "Cantidad": count,
                            "Confianza promedio": f"{confidence:.2f}"
                        })
                    
                    if data:
                        df = pd.DataFrame(data)
                        st.dataframe(df, use_container_width=True)
                        
                        # Mostrar gr√°fico de barras
                        st.bar_chart(df.set_index('Categor√≠a')['Cantidad'])
                    else:
                        st.info("No se detectaron objetos con los par√°metros actuales.")
                        st.caption("Prueba a reducir el umbral de confianza en la barra lateral.")
            except Exception as e:
                st.error(f"Error al procesar los resultados: {str(e)}")
                st.stop()
else:
    st.error("No se pudo cargar el modelo. Por favor verifica las dependencias e int√©ntalo nuevamente.")
    st.stop()

# Informaci√≥n adicional y pie de p√°gina
st.markdown("---")
st.caption("""
**Acerca de la aplicaci√≥n**: Esta aplicaci√≥n utiliza YOLOv5 para detecci√≥n de objetos en tiempo real.
Desarrollada con Streamlit y PyTorch.
""")
